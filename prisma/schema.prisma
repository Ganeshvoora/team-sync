// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  level       Int
  description String?
  permissions Json?
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  users    User[]
  invitations Invitation[]
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  budget      Decimal?
  
  headId               String?
  parentDepartmentId   String?
  head                 User?       @relation("DepartmentHead", fields: [headId], references: [id])
  parentDepartment     Department? @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  subDepartments       Department[] @relation("DepartmentHierarchy")
  
  users    User[]
  roles    Role[]
  projects Project[]
  
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String
  profilePictureUrl String?
  contactNumber    String?
  skills           String?
  bio              String?
  employeeId       String?
  location         String?
  hireDate         DateTime?
  lastLoginAt      DateTime?
  permissions      Json?
  
  status       UserStatus @default(PENDING_APPROVAL)
  roleId       String?
  managerId    String?
  departmentId String?
  
  role         Role?       @relation(fields: [roleId], references: [id])
  manager      User?       @relation("UserManager", fields: [managerId], references: [id])
  department   Department? @relation(fields: [departmentId], references: [id])
  
  directReports     User[]        @relation("UserManager")
  departmentsLed    Department[]  @relation("DepartmentHead")
  
  tasksAssignedToMe Task[]        @relation("TaskAssignee")
  tasksAssignedByMe Task[]        @relation("TaskAssigner")
  projectsManaged   Project[]     @relation("ProjectManager")
  comments          Comment[]
  taskComments      TaskComment[]
  taskActivities    TaskActivity[]
  notifications     Notification[]
  activityLogs      ActivityLog[]
  timeEntries       TimeEntry[]
  
  // Invitation relations
  invitationsSent   Invitation[]  @relation("InvitationInviter")
  invitationsManaged Invitation[] @relation("InvitationManager")
  addedResources    Resource[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal?
  
  managerId    String
  departmentId String
  
  manager    User       @relation("ProjectManager", fields: [managerId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  
  tasks       Task[]
  timeEntries TimeEntry[]
  resources   Resource[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus @default(NOT_STARTED)
  priority       TaskPriority @default(MEDIUM)
  dueDate        DateTime?
  estimatedHours Int?
  actualHours    Int?
  tags           String[]
  attachments    Json?
  
  assigneeId String
  assignerId String
  projectId  String?
  
  assignee User     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigner User     @relation("TaskAssigner", fields: [assignerId], references: [id])
  project  Project? @relation(fields: [projectId], references: [id])
  
  comments       Comment[]
  taskComments   TaskComment[]
  taskActivities TaskActivity[]
  timeEntries    TimeEntry[]
  
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id              String   @id @default(cuid())
  content         String
  attachments     Json?
  isEdited        Boolean  @default(false)
  
  taskId          String
  authorId        String
  parentCommentId String?
  
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author        User     @relation(fields: [authorId], references: [id])
  parentComment Comment? @relation("CommentThread", fields: [parentCommentId], references: [id])
  replies       Comment[] @relation("CommentThread")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  actionUrl String?
  isRead    Boolean          @default(false)
  expiresAt DateTime?
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}

model ActivityLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  userAgent  String?
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  hours       Decimal
  date        DateTime
  isApproved  Boolean  @default(false)
  
  taskId    String?
  userId    String
  projectId String?
  
  task    Task?    @relation(fields: [taskId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PendingUser {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  contactNumber     String
  skills            String?
  bio               String?
  employeeId        String?
  location          String?
  profilePictureUrl String?
  status            ApplicationStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id          String           @id @default(cuid())
  email       String
  inviterId   String
  managerId   String
  roleId      String?
  status      InvitationStatus @default(PENDING)
  token       String           @unique
  expiresAt   DateTime
  
  inviter     User @relation("InvitationInviter", fields: [inviterId], references: [id])
  manager     User @relation("InvitationManager", fields: [managerId], references: [id])
  role        Role? @relation(fields: [roleId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for storing resource links
model Resource {
  id        String   @id @default(cuid())
  title     String
  url       String   // This is where we store the link
  createdAt DateTime @default(now())

  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  addedById String
  addedBy   User     @relation(fields: [addedById], references: [id])
}

enum UserStatus {
  PENDING_APPROVAL
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  DEADLINE_APPROACHING
  SYSTEM
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum ActivityAction {
  CREATED
  UPDATED
  STATUS_CHANGED
  PRIORITY_CHANGED
  ASSIGNED
  COMMENT_ADDED
  COMPLETED
  DELETED
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model TaskActivity {
  id          String        @id @default(cuid())
  taskId      String
  userId      String
  action      ActivityAction
  description String
  createdAt   DateTime      @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_activities")
}
